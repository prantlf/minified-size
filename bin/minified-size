#!/usr/bin/env node

'use strict'

const commander = require('commander')
const minifiedSize = require('..')
const prettyBytes = require('pretty-bytes')
const pkg = require('../package.json')

commander.version(pkg.version)
  .description(pkg.description)
  .usage('[options] <file>, ... | --')
  .option('-j, --json', 'print results in the JSON format')
  .option('-r, --raw-sizes', 'print sizes in bytes as integers')
  .option('-o, --no-original-size', 'prevents printing the size of the original code')
  .option('-m, --no-minified-size', 'prevents printing the size of the minified code')
  .option('-g, --no-gzipped-size', 'prevents printing the size of the gzipped code')

commander.on('--help', () => {
  console.log('  All three sizes are estimated by default. File paths may contain wildcards.')
  console.log('  If "--" is entered instead of files, the standard input will be read.')
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ minified-size lib/index.js')
  console.log('    $ minified-size --json lib/*.js')
  console.log('    $ cat lib/index.js | minified-size --')
})

const args = process.argv
commander.parse(args)
const files = commander.args
let streams
if (!files.length) {
  if (args[args.length - 1] === '--') {
    streams = [ process.stdin ]
  } else {
    commander.help()
  }
}

const {
  json, rawSizes, originalSize: printOriginalSize,
  minifiedSize: printMinifiedSize, gzippedSize: printGzippedSize
} = commander

function printError (file, { message, line, column }) {
  if (line) {
    console.log(`${file}:${line}:${column}: ${message}`)
  } else {
    console.log(`${file}: ${message}`)
  }
}

function printResult ({ error, file, originalSize, minifiedSize, gzippedSize }) {
  if (error) {
    printError(file, error)
  } else {
    let sizes = []
    if (printOriginalSize) {
      sizes.push(originalSize)
    }
    if (printMinifiedSize) {
      sizes.push(minifiedSize)
    }
    if (printGzippedSize) {
      sizes.push(gzippedSize)
    }
    if (!rawSizes) {
      sizes = sizes.map(prettyBytes)
    }
    sizes = sizes.join(', ')
    console.log(`${file}: ${sizes}`)
  }
}

(async () => {
  const results = await minifiedSize({ files, streams, gzip: printGzippedSize })
  if (json) {
    console.log(results)
  } else {
    results.forEach(printResult)
  }
})()
